<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lgcns.wcs.kurly.repository.OrdmadeNotfullyRepository">
   
  <select id="selectOrdmadeNotfully" resultType="com.lgcns.wcs.kurly.dto.OrdmadeNotfullyData">
  	/* [OrdmadeNotfullyMapper.xml] selectOrdmadeNotfully */
    SELECT 
		OD.INVOICE_NO         AS invoiceNo,
		OD.INVOICE_SEQ        AS invoiceSeq,
		OD.WAREHOUSE_KEY      AS warehouseKey,
		OH.DOC_DATE           AS docDate,
		OD.GROUP_NO           AS groupNo,
		OD.WORK_BATCH_NO      AS workBatchNo,
		OD.PICKING_BATCH_NO   AS pickingBatchNo,
		OD.SHIP_ORDER_KEY       AS shipOrderKey,
		OD.SHIP_ORDER_ITEM_SEQ  AS shipOrderItemSeq,
		OD.SKU_CODE           AS skuCode,
		OD.SKU_NAME           AS skuName,
		OD.SKU_SUB_NAME       AS skuSubName,
		OD.QTY_NOTFULLY       AS qtyNotfully,
		TO_CHAR(SYSDATE, 'YYYYMMDD') AS insertedDate,
		TO_CHAR(SYSDATE, 'HH24MISS') AS insertedTime,
		OH.CREATED_USER AS insertedUser
 	FROM  o_wcs.TB_QPS_ORDER_HDR OH ,
		  o_wcs.TB_QPS_ORDER_DTL OD   
 	WHERE  OH.INVOICE_NO = OD.INVOICE_NO
 	  AND  OD.ORDMADE_NOTFULLY_TYPE   IN ( 'ORDMADE', 'PARTSHIP' )
 	  AND  OD.NOTFULLY_IF_YN      = 'N' 
  </select>

  <update id="updateOrdmadeNotfully" parameterType="Map">
    /* [OrdmadeNotfullyMapper.xml] updateOrdmadeNotfully */
  	UPDATE o_wcs.TB_QPS_ORDER_DTL
		SET
			NOTFULLY_IF_YN  = #{notfullyIfYn} ,
			NOTFULLY_IF_YMD = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') ,
			NOTFULLY_IF_RET_CODE = #{notfullyIfRetCode} ,
			NOTFULLY_IF_RET_MESSAGE = #{notfullyIfRetMessage} ,
			MODIFIED_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') ,
			MODIFIED_TIME = TO_CHAR(SYSDATE, 'HH24MISS') ,
			MODIFIED_USER = #{modifiedUser}
	WHERE INVOICE_NO = #{invoiceNo}
	  AND INVOICE_SEQ = #{invoiceSeq}
  </update>
  
  <update id="updateOrdmadeNotfullyList" parameterType="map">
  /* [OrdmadeNotfullyMapper.xml] updateOrdmadeNotfullyList */
    MERGE INTO o_wcs.TB_QPS_ORDER_DTL  HDR
    	USING (
    		<foreach collection="updateList" item="item" index="index" separator="UNION ALL">
    		SELECT
				#{item.invoiceNo}  AS INVOICE_NO,
				#{item.invoiceSeq}  AS INVOICE_SEQ,
				#{item.notfullyIfYn}  AS NOTFULLY_IF_YN ,  
				#{item.notfullyIfRetCode}  AS NOTFULLY_IF_RET_CODE ,
				#{item.notfullyIfRetMessage}  AS NOTFULLY_IF_RET_MESSAGE ,
				#{item.modifiedUser}  AS MODIFIED_USER
    		FROM DUAL
   		   </foreach>
	) TB
	ON 
	(
			HDR.INVOICE_NO = TB.INVOICE_NO
		AND HDR.INVOICE_SEQ = TB.INVOICE_SEQ
	)
	WHEN MATCHED THEN
		UPDATE
		<set>
			HDR.NOTFULLY_IF_YN  = TB.NOTFULLY_IF_YN ,
			HDR.NOTFULLY_IF_YMD = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') ,
			HDR.NOTFULLY_IF_RET_CODE = TB.NOTFULLY_IF_RET_CODE ,
			HDR.NOTFULLY_IF_RET_MESSAGE = TB.NOTFULLY_IF_RET_MESSAGE ,
			HDR.MODIFIED_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD') ,
			HDR.MODIFIED_TIME = TO_CHAR(SYSDATE, 'HH24MISS') ,
			HDR.MODIFIED_USER = TB.MODIFIED_USER
		</set>
  </update>

</mapper>